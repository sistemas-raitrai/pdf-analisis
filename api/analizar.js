import OpenAI from "openai";
import formidable from "formidable";
import fs from "fs/promises";
import mammoth from "mammoth";

export const config = {
  api: { bodyParser: false } // necesario para usar formidable en Vercel
};

export default async function handler(req, res) {
  console.log("üì• Iniciando an√°lisis de archivo...");

  const form = formidable({
    keepExtensions: true,
    uploadDir: "/tmp",
    maxFileSize: 30 * 1024 * 1024
  });

  form.parse(req, async (err, fields, files) => {
    if (err) {
      console.error("‚ùå Error al parsear el formulario:", err);
      return res.status(500).send("Error al procesar el formulario");
    }

    try {
      const fileObj = files.file?.[0] || Object.values(files)[0];
      const filePath = fileObj?.filepath;
      const mimeType = fileObj?.mimetype;
      const opciones = JSON.parse(fields.opciones?.[0] || "[]");

      if (!filePath || mimeType !== "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
        return res.status(400).send("Solo se aceptan archivos DOCX.");
      }

      const buffer = await fs.readFile(filePath);
      const result = await mammoth.extractRawText({ buffer });
      const extractedText = result.value;
      console.log("üìÉ Texto extra√≠do. Longitud:", extractedText.length);

      // Generaci√≥n din√°mica del prompt
      let prompt = `
      Eres un revisor experto en contratos de viajes estudiantiles. Tu tarea es entregar un informe claro, breve y √∫til para vendedores que no leen mucho texto.
      
      1. Comienza con un **Diagn√≥stico General** que resuma el estado del documento:
      - ‚úÖ Todo correcto: solo si no hay observaciones importantes.
      - ‚ö†Ô∏è Requiere correcciones menores.
      - ‚ùóErrores graves detectados que deben corregirse.
      
      ‚ùó IMPORTANTE: Este diagn√≥stico debe ser **coherente** con las observaciones. Si encuentras errores en los puntos siguientes, NO indiques que est√° "Todo correcto".
      
      2. Luego, entrega observaciones concretas como bullets. Cada punto debe indicar:
      - Qu√© parte revisar (ej: nombre del colegio, fechas, montos).
      - Qu√© error se detect√≥ (cita el texto si es posible).
      - Qu√© debe corregirse exactamente (prop√≥n una correcci√≥n concreta).
      
      3. Usa este formato claro:
      - ‚ö†Ô∏è Revisar nombre del colegio: "Colegio ABC" aparece con error ("ABC" escrito como "ACB"). Corregir en el t√≠tulo del contrato.
      - ‚ö†Ô∏è La direcci√≥n "La Concepci√≥n 305" no coincide con anexo 1. Unificar ambas.
      
      4. No repitas el contrato ni uses lenguaje legal. S√© preciso, directo y pr√°ctico.
      
      Analiza el siguiente texto seg√∫n las instrucciones seleccionadas por el usuario:\n\n`;


      if (opciones.includes("contrato")) {
        prompt += `
üîπ CONTRATO:
Revisa exclusivamente los elementos personalizables del contrato tipo (nombre de firmantes, valores, fechas, colegios, condiciones de pago, etc.). Detecta errores, omisiones o incoherencias respecto al modelo original. Ignora cl√°usulas fijas del contrato si no han sido modificadas.\n\n`;
      }

      if (opciones.includes("anexo1")) {
        prompt += `
üîπ ANEXO 1 (Itinerario y Programa):
Revisa el itinerario detallado d√≠a por d√≠a y comp√°ralo con la secci√≥n final donde se enumeran los servicios que el programa "Incluye".

1. Aseg√∫rate de que todas las actividades mencionadas d√≠a por d√≠a est√©n tambi√©n reflejadas en la lista de "Incluye", y viceversa. Detecta si falta alguna actividad o si hay inconsistencias.
2. Si puedes, haz un peque√±o resumen con bullets indicando las actividades por d√≠a (D√≠a 1, D√≠a 2, etc.) para facilitar la revisi√≥n por parte del usuario.
3. Verifica tambi√©n si los valores, fechas y condiciones de cambio o cancelaci√≥n son claras y coherentes.
4. Indica errores frecuentes como:
   - Actividades mencionadas pero no incluidas.
   - Incoherencias entre d√≠as (ej: check-out el D√≠a 4 pero actividades D√≠a 5).
   - Listas de "Incluye" mal redactadas, incompletas o contradictorias.
5. S√© claro, directo y √∫til para un usuario que solo quiere saber qu√© revisar y qu√© corregir.

Entrega un an√°lisis claro y corto, sin repetir el texto completo del contrato.\n\n`;
      }

      if (opciones.includes("anexo2")) {
        prompt += `
üîπ ANEXO 2 (Seguro M√©dico):
Verifica que el seguro m√©dico descrito en este anexo coincida con lo que se menciona en el contrato y que no haya contradicciones. Eval√∫a la claridad de cobertura, condiciones, exclusiones y vigencia.\n\n`;
      }

      if (opciones.includes("anexo3")) {
        prompt += `
üîπ ANEXO 3 (Seguro de Cancelaci√≥n):
Haz una revisi√≥n b√°sica de este anexo. Solo alerta si hay omisiones graves o incoherencias importantes. Este anexo suele mantenerse fijo.\n\n`;
      }

      // Adjunta el texto completo (o parte si es muy largo)
      prompt += `Texto del documento:\n\n${extractedText.slice(0, 8000)}`;

      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

      const response = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }]
      });

      const resultText = response.choices[0].message.content;
      console.log("‚úÖ An√°lisis completado.");
      res.status(200).send(resultText);

    } catch (error) {
      console.error("‚ùå Error interno:", error);
      res.status(500).send("Error al procesar el archivo.");
    }
  });
}
